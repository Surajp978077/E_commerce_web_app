For handling login status

// index.js
import React from "react";
import ReactDOM from "react-dom";
import UserInfoProvider from "./providers/UserInfoProvider";
import AuthProvider from "./providers/AuthProvider";
import App from "./App";

ReactDOM.render(
  <AuthProvider>
    <UserInfoProvider>
      <App />
    </UserInfoProvider>
  </AuthProvider>,
  document.getElementById("root")
);

// UserInfoProvider.js
import React, { useState, useEffect } from "react";
import UserInfoContext from "../contexts/UserInfoContext";
import jwtDecode from "jwt-decode";
import { userInfoInstance } from "../api/axios";

function UserInfoProvider(props) {
  const [userInfo, setUserInfo] = useState(null);
  const [error, setError] = useState(null);

  useEffect(() => {
    const token = localStorage.getItem("token");
    const decodedToken = jwtDecode(token);
    const id = decodedToken.id;

    const fetchData = async () => {
      try {
        const response = await userInfoInstance.get(`/${id}`);
        if (response.status !== 200) {
          throw new Error("Invalid status code");
        }
        setUserInfo(response.data);
      } catch (error) {
        setError("Could not fetch user info");
      }
    };

    fetchData();
  }, []);

  return (
    <UserInfoContext.Provider value={userInfo}>
      {props.children}
    </UserInfoContext.Provider>
  );
}

export default UserInfoProvider;

// AuthProvider.js
import React, { useState } from "react";
import AuthContext from "../contexts/AuthContext";
import { authInstance } from "../api/axios";

function AuthProvider(props) {
  const [loggedIn, setLoggedIn] = useState(false);
  const [error, setError] = useState(null);

  const handleLogin = async (username, password) => {
    try {
      const response = await authInstance.post("/login", { username, password });
      if (response.status === 200) {
        localStorage.setItem("token", response.data.token);
        setLoggedIn(true);
      } else {
        setError("Invalid credentials");
      }
    } catch (error) {
      setError("Could not log in");
    }
  };

  const handleLogout = () => {
    localStorage.removeItem("token");
    setLoggedIn(false);
  };

  return (
    <AuthContext.Provider value={{ loggedIn, error, handleLogin, handleLogout }}>
      {props.children}
    </AuthContext.Provider>
  );
}

export default AuthProvider;
